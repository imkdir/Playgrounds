<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit
import PlaygroundSupport

class HighlightView: UIView {
    
    typealias Data = (history: Int?, current: Int?)
    var data: Data = (nil, nil) {
        didSet {
            setNeedsDisplay()
        }
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
    }
    
    override func draw(_ rect: CGRect) {
        guard let context = UIGraphicsGetCurrentContext() else { return }
        let brect = bounds.insetBy(dx: 12, dy: 12)
        drawBackground(in: brect, context: context)
        let irect = bounds.inset(by: .init(top: 22, left: 12, bottom: 42, right: 12))
        drawContent(in: irect, context: context)
    }
    
    private func drawContent(in rect: CGRect, context: CGContext) {
        context.beginPath()
        context.move(to: .init(x: rect.midX, y: rect.minY))
        context.addLine(to: .init(x: rect.midX, y: rect.maxY))
        context.setStrokeColor(UIColor.systemRed.cgColor)
        context.strokePath()
        
        if let history = data.history {
            context.saveGState()
            context.beginPath()
            context.setLineWidth(4)
            context.setStrokeColor(UIColor.hex(0xFF538D, alpha: 0.3).cgColor)
            context.setFillColor(UIColor.hex(0xFF538D).cgColor)
            context.addEllipse(in: .init(x: rect.midX - 4, y: rect.maxY - 4 - CGFloat(history * 30), width: 8, height: 8))
            context.drawPath(using: .fillStroke)
            context.restoreGState()
        }
        if let current = data.current {
            context.saveGState()
            context.beginPath()
            context.setLineWidth(4)
            context.setStrokeColor(UIColor.hex(0x5B62D2, alpha: 0.3).cgColor)
            context.setFillColor(UIColor.hex(0x5B62D2).cgColor)
            context.addEllipse(in: .init(x: rect.midX - 4, y: rect.maxY - 4 - CGFloat(current * 30), width: 8, height: 8))
            context.drawPath(using: .fillStroke)
            context.restoreGState()
        }
    }
    
    private func drawBackground(in rect: CGRect, context: CGContext) {
        context.saveGState()
        context.beginPath()
        context.addPath(UIBezierPath(roundedRect: rect, cornerRadius: 4).cgPath)
        context.addPath(UIBezierPath(roundedRect: rect.insetBy(dx: 1, dy: 1), cornerRadius: 4).cgPath)
        context.clip(using: .evenOdd)
        context.drawLinearGradient(self.gradient(with: [UIColor(white: 1, alpha: 1.0), UIColor(white: 1, alpha: 0)]), start: .init(x: rect.midX, y: rect.minY), end: .init(x: rect.midX, y: rect.maxY), options: [])
        context.restoreGState()
        
        context.saveGState()
        let fillPath = UIBezierPath(roundedRect: rect, cornerRadius: 4)
        context.addPath(fillPath.cgPath)
        context.clip()
        context.drawLinearGradient(self.gradient(with: [UIColor(white: 1, alpha: 0.7), UIColor(white: 1, alpha: 0)]), start: .init(x: rect.midX, y: rect.minY), end: .init(x: rect.midX, y: rect.maxY), options: [])
        context.restoreGState()
    }
    
    private func gradient(with colors: [UIColor]) -&gt; CGGradient {
        CGGradient(
            colorsSpace: CGColorSpaceCreateDeviceRGB(), 
            colors: colors.map({ $0.cgColor }) as CFArray, 
            locations: [0, 1])!
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

class LineChartView: UIView {
    
    var length: Int = 8
    var color: UIColor?
    
    var data: [Int: Int] = [:]
    
    var lines: [Line] {
        Line.lines(with: data, count: length)
    }
    
    func animate() {
        solidLineLayer.removeAnimation(forKey: "solid")
        dashLineLayer.removeAnimation(forKey: "dashed")
        solidLineLayer.add(strokeAnimation, forKey: "solid")
        dashLineLayer.add(strokeAnimation, forKey: "dashed")
    }
    
    private var strokeAnimation: CAAnimation {
        let anim = CABasicAnimation(keyPath: "strokeEnd")
        anim.fromValue = 0
        anim.toValue = 1
        anim.duration = 0.5
        anim.timingFunction = .init(name: .easeOut)
        anim.isRemovedOnCompletion = false
        anim.fillMode = .forwards
        return anim
    }
    
    private lazy var solidLineLayer: CAShapeLayer = {
        let layer = CAShapeLayer()
        layer.path = self.linePath(for: lines.filter({ !$0.isDashed }))
            .cgPath
        layer.lineWidth = 1
        layer.strokeColor = color?.cgColor
        layer.fillColor = nil
        layer.strokeEnd = 0
        return layer
    }()
    
    private lazy var dashLineLayer: CAShapeLayer = {
        let layer = CAShapeLayer()
        layer.path = self.linePath(for: lines.filter({ $0.isDashed }))
            .cgPath
        layer.lineWidth = 1
        layer.lineDashPattern = [4, 2]
        layer.lineDashPhase = 0
        layer.strokeColor = color?.cgColor
        layer.fillColor = nil
        layer.strokeEnd = 0
        return layer
    }()
    
    private func linePath(for lines: [Line]) -&gt; UIBezierPath {
        
        let result = UIBezierPath()
        let tx = bounds.width / CGFloat(length - 1)
        
        for line in lines {
            switch line {
            case .solid(let points):
                let path = UIBezierPath()
                points.first
                    .map({ 
                        let rp = CGPoint(
                            x: bounds.minX + $0.x * tx,
                            y: bounds.maxY - $0.y * 30)
                        path.move(to: rp) 
                    })
                points.dropFirst().forEach {
                    let rp = CGPoint(
                        x: bounds.minX + $0.x * tx,
                        y: bounds.maxY - $0.y * 30)
                    path.addLine(to: rp) 
                }
                result.append(path)
            case .dash(let from, let to):
                let path = UIBezierPath()
                path.move(to: CGPoint(
                            x: bounds.minX + from.x * tx,
                            y: bounds.maxY - from.y * 30))
                path.addLine(to: CGPoint(
                                x: bounds.minX + to.x * tx,
                                y: bounds.maxY - to.y * 30))
                result.append(path)
                break
            }
        }
        return result
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        if solidLineLayer.superlayer == nil {
            layer.addSublayer(dashLineLayer)
            layer.addSublayer(solidLineLayer)
        }
        dashLineLayer.frame = bounds
        solidLineLayer.frame = bounds
    }
    
    enum Line {
        case solid(points: [CGPoint])
        case dash(from: CGPoint, to: CGPoint)
        
        var isDashed: Bool {
            if case .dash = self {
                return true
            }
            return false
        }
        
        static func lines(with dict: [Int: Int], count: Int) -&gt; [Line] {
            var result = [Line]()
            
            var lastPoint: CGPoint?
            var solidPoints: [CGPoint] = []
            var dashPoints: [CGPoint] = []
            
            for i in 0 ..&lt; count {
                if let v = dict[i] {
                    let point = CGPoint(x: i, y: v)
                    solidPoints.append(point)
                    if let first = dashPoints.first {
                        result.append(.dash(from: first, to: point))
                        dashPoints.removeAll()
                    }
                    lastPoint = point
                } else {
                    if solidPoints.count &gt; 1 {
                        result.append(.solid(points: solidPoints))
                    }
                    solidPoints.removeAll()
                    lastPoint.map({ dashPoints.append($0) })
                }
            }
            if solidPoints.count &gt; 1 {
                result.append(.solid(points: solidPoints))
            }
            return result
        }
    }
}

class FlowPatternChartView: UIView {
    
    private let historyView = LineChartView()
    private let currentView = LineChartView()
    private let highlightView = HighlightView()
    
    var history: [Int: Int] = [
        0:1, 1:3, 2:3, 4:4, 5:3, 6:1, 7:0
    ]
    var current: [Int: Int] = [
        0:0, 1:3, 2:4, 4:2, 5:3, 7:0
    ]
    var length: Int = 8 {
        didSet {
            historyView.length = length
            currentView.length = length
        }
    }
    
    func animate() {
        historyView.animate()
        currentView.animate()
        showHightlight(at: .random(in: 0..&lt;length))
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
        
        addSubview(historyView)
        historyView.length = length
        historyView.color = UIColor.hex(0xFF538D)
        historyView.data = history
        
        addSubview(currentView)
        currentView.length = length
        currentView.color = UIColor.hex(0x5B62D2)
        currentView.data = current
        
        addSubview(highlightView)
    }
    
    func showHightlight(at index: Int) {
        let tx = (mainRect(in: bounds).width - 32) / CGFloat(length - 1)
        let data = (history[index], current[index])
        highlightView.data = (nil, nil)
        UIView.animate(withDuration: 0.2, delay: 0.2, options: [.curveEaseInOut], animations: {
            self.highlightView.frame = CGRect(x: 48 + tx * CGFloat(index), y: 0, width: 56, height: 184)
        }, completion: { _ in 
            self.highlightView.data = data
        })
    }
    
    override func layoutSubviews() {
        historyView.frame = mainRect(in: bounds).insetBy(dx: 16, dy: 0)
        currentView.frame = historyView.frame
        highlightView.frame = CGRect(x: 48, y: 0, width: 56, height: 184)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func draw(_ rect: CGRect) {
        guard let context = UIGraphicsGetCurrentContext() else { return }
        let grect = self.mainRect(in: bounds)
        drawGridBackground(in: grect, context: context)
        drawGraidentWithMask(in: grect, context: context)
        let lrect = CGRect(x: rect.minX, y: grect.minY, width: 60, height: grect.height)
        drawYLabels(in: lrect, context: context)
        let brect = CGRect(x: grect.minX, y: grect.maxY + 12, width: grect.width, height: 20)
        drawXLabels(in: brect, context: context)
    }
    
    private func drawGridBackground(in rect: CGRect, context: CGContext) {
        context.setStrokeColor(UIColor.hex(0x666666).cgColor)
        context.setLineDash(phase: 2, lengths: [2, 2])
        context.setLineWidth(0.5)
        
        func drawHorizontalLine() {
            context.beginPath()
            context.move(to: .init(x: rect.minX, y: rect.minY))
            context.addLine(to: .init(x: rect.maxX, y: rect.minY))
            context.strokePath()
        }
        
        func drawVerticalLine() {
            context.beginPath()
            let x = rect.minX + 16
            context.move(to: .init(x: x, y: rect.minY))
            context.addLine(to: .init(x: x, y: rect.maxY))
            context.strokePath()
        }
        
        let ty = CGFloat(30)
        for i in 0 ..&lt; 5 {
            context.saveGState()
            context.translateBy(x: 0, y: ty * CGFloat(i))
            drawHorizontalLine()
            context.restoreGState()
        }
        
        let tx = (rect.width - 32) / CGFloat(length - 1)
        for i in 0 ..&lt; length {
            context.saveGState()
            context.translateBy(x: tx * CGFloat(i), y: 0)
            drawVerticalLine()
            context.restoreGState()
        }
    }
    
    private func drawGraidentWithMask(in rect: CGRect, context: CGContext) {
        guard let gradient = CGGradient(
                colorsSpace: CGColorSpaceCreateDeviceRGB(), 
                colors: [
                    UIColor.hex(0xFF538D, alpha: 0.3).cgColor,
                    UIColor.hex(0xFF538D, alpha: 0.0).cgColor
                ] as CFArray, 
                locations: [0, 1]) else {
            return
        }
        context.saveGState()
        context.beginPath()
        context.move(to: .init(x: rect.minX, y: rect.maxY))
        let tx = (rect.width - 32) / CGFloat(length - 1)
        for i in 0 ..&lt; length {
            guard let v = history[i] else { continue }
            context.addLine(to: .init(x: rect.minX + 16 + tx * CGFloat(i), y: rect.maxY - CGFloat(30 * v)))
        }
        context.addLine(to: .init(x: rect.maxX, y: rect.maxY))
        context.closePath()
        context.clip()
        context.drawLinearGradient(gradient, start: .init(x: rect.midX, y: rect.minY), end: .init(x: rect.midX, y: rect.maxY), options: [])
        context.restoreGState()
    }
    
    private func drawYLabels(in rect: CGRect, context: CGContext) {
        func drawLabel(_ label: String) {
            let lsize = label.boundingRect(with: rect.size, attributes: attributesY).size
            let lrect = CGRect(x: rect.minX, y: rect.maxY - lsize.height * 0.5, width: lsize.width, height: lsize.height)
            (label as NSString).draw(in: lrect, withAttributes: attributesY)
        }
        for i in 0 ..&lt; yLabels.count {
            context.saveGState()
            context.translateBy(x: 0, y: -CGFloat(30 * i))
            drawLabel(yLabels[i])
            context.restoreGState()
        }
    }
    
    private func drawXLabels(in rect: CGRect, context: CGContext) {
        func drawLabel(_ label: String) {
            let lsize = label.boundingRect(with: rect.size, attributes: attributesX).size
            let lrect = CGRect(x: rect.minX + 16 - lsize.width * 0.5, y: rect.minY, width: lsize.width, height: lsize.height)
            (label as NSString).draw(in: lrect, withAttributes: attributesX)
        }
        let tx = (rect.width - 32) / CGFloat(length - 1)
        for i in 0 ..&lt; length {
            context.saveGState()
            context.translateBy(x: tx * CGFloat(i), y: 0)
            drawLabel("\(i+1)")
            context.restoreGState()
        }
    }
    
    private func mainRect(in rect: CGRect) -&gt; CGRect {
        CGRect(
            x: rect.minX + 60, 
            y: rect.minY + 22, 
            width: rect.width - 60, 
            height: 120)
    }
    
    private let attributesY: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 14),
        .foregroundColor: UIColor.hex(0x999999)
    ]
    
    private let attributesX: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 14),
        .foregroundColor: UIColor.hex(0x999999)
    ]
    
    private let yLabels = ["None", "Spotting", "Light", "Medium", "Heavy"]
}

class ViewController: DemoViewController {
    
    let chartView = FlowPatternChartView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = UIColor.hex(0xFFEDED)
        frameView.backgroundColor = UIColor.hex(0xF8ECC2)
        
        frameView.addSubview(chartView)
        
        chartView.translatesAutoresizingMaskIntoConstraints = false
        chartView.centerInSuperview(height: 200)
    }
    
    @objc
    override func animateBlock() {
        chartView.animate()
    }
}

let page = ViewController()

PlaygroundPage.current.needsIndefiniteExecution = true
PlaygroundPage.current.liveView = page
</string>
			<key>ModifiedRange</key>
			<string>{0, 15710}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
