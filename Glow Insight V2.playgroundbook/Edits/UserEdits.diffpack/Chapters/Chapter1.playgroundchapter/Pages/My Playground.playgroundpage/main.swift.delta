<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit
import IconKit
import PlaygroundSupport

final class FemaleBodyView: UIView {
    
    private lazy var shapeLayer: CAShapeLayer = {
        let layer = CAShapeLayer()
        layer.path = self.linePath().cgPath
        layer.strokeColor = UIColor.hex(0xFF6868).cgColor
        layer.lineWidth = 76
        layer.strokeEnd = 0
        return layer
    }()
    
    private lazy var maskLayer: CAShapeLayer = {
        let layer = CAShapeLayer()
        layer.path = femaleBodyPath().cgPath
        layer.fillColor = UIColor.black.cgColor
        return layer
    }()
    
    private func linePath() -&gt; UIBezierPath {
        let path = UIBezierPath()
        path.move(to: .init(x: 38, y: bounds.maxY))
        path.addLine(to: .init(x: 38, y: bounds.minY))
        return path
    }
    
    func animate(to value: Double) {
        shapeLayer.removeAnimation(forKey: "female-body")
        shapeLayer.add(strokeAnimation(toValue: value), forKey: "female-body")
    }
    
    deinit {
        shapeLayer.removeAllAnimations()
    }
    
    private func strokeAnimation(toValue: Double) -&gt; CAAnimation {
        let anim = CABasicAnimation(keyPath: "strokeEnd")
        anim.fromValue = 0
        anim.toValue = toValue
        anim.duration = 0.5
        anim.timingFunction = .init(name: .easeOut)
        anim.isRemovedOnCompletion = false
        anim.fillMode = .forwards
        return anim
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
    }
    
    override func draw(_ rect: CGRect) {
        guard let context = UIGraphicsGetCurrentContext() else {
            return
        }
        context.saveGState()
        context.beginPath()
        context.setShadow(offset: .zero, blur: 12, color: UIColor.hex(0xFFB5F6, alpha: 0.5).cgColor)
        context.translateBy(x: 0, y: 14)
        context.addPath(femaleBodyPath().cgPath)
        context.setFillColor(UIColor.white.cgColor)
        context.fillPath()
        context.restoreGState()
        
        let csize = attributedContent.boundingRect(with: CGSize(width: bounds.width - 86, height: bounds.height), options: [.usesLineFragmentOrigin], context: nil).size
        attributedContent.draw(with: .init(x: 86, y: bounds.maxY - csize.height, width: bounds.width - 86, height: csize.height), options: [.usesLineFragmentOrigin], context: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        if shapeLayer.superlayer == nil {
            layer.addSublayer(shapeLayer)
            shapeLayer.mask = maskLayer
        }
        shapeLayer.frame = bounds.offsetBy(dx: 0, dy: 14)
    }
    
    private var attributedContent: NSAttributedString {
        let result = NSMutableAttributedString()
        result.append(.init(string: "62", attributes: [.font: UIFont.systemFont(ofSize: 36, weight: .bold), .foregroundColor: UIColor.hex(0xFF6868), .paragraphStyle: NSParagraphStyle.mutable().with(\.lineHeightMultiple, 1.17)]))
        result.append(.init(string: "%", attributes: [.font: UIFont.systemFont(ofSize: 16, weight: .bold), .foregroundColor: UIColor.hex(0xFF6868)]))
        result.append(.init(string: "\nof your TTC\ncycle buddies\nlogged sex\ntoday(CD 15).", attributes: [.font: UIFont.systemFont(ofSize: 14), .foregroundColor: UIColor.hex(0x666666), .paragraphStyle: NSParagraphStyle.mutable().with(\.lineHeightMultiple, 1.21)]))
        return result
    }
}

class CycleRingView: UIView {
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func draw(_ rect: CGRect) {
        guard let context = UIGraphicsGetCurrentContext() else { return }
        drawSexCycleChart(in: rect, context: context)
        drawLabels()
    }
    
    private func drawSexCycleChart(in rect: CGRect, context: CGContext) {
        let radius = CGFloat(65)
        let lineWidth = CGFloat(24)
        
        drawCycleRing(
            in: rect, 
            context: context, 
            radius: radius, 
            lineWidth: lineWidth, 
            shadowBlur: 16, 
            shadowColor: UIColor.hex(0xFFB5F6, alpha: 0.5))
        // total angle .pi * 1.5
        // start: .pi * 0.75
        // end: .pi * 2.25
        // angle per day = total angle / cycle length
        // start angle at day x: start angle + angle per day * x
        // asssume cycle length 28, draw phase (1...4) (12...18)
        let apd = CGFloat(.pi * 1.5 / 28.0)
        var startAngle: CGFloat = .pi * 0.75 + apd * CGFloat(1-1)
        var endAngle = .pi * 0.75 + apd * CGFloat(4-1)
        var color = UIColor.hex(0xFF538D, alpha: 0.3)
        drawCyclePhase(in: rect, startAngle: startAngle, endAngle: endAngle, radius: radius, lineWidth: lineWidth, color: color)
        startAngle = .pi * 0.75 + apd * CGFloat(12-1)
        endAngle = .pi * 0.75 + apd * CGFloat(18-1)
        color = UIColor.hex(0x1EC493, alpha: 0.3)
        drawCyclePhase(in: rect, startAngle: startAngle, endAngle: endAngle, radius: radius, lineWidth: lineWidth, color: color)
        
        for i in [0, 3, 6, 9, 18, 21] {
            drawCycleActiviy(in: rect, radius: radius, positionAngle: .pi * 0.75 - apd * CGFloat(i), rotationAngle: .pi * 1.25 + apd * CGFloat(i), in: context)
        }
    }
    
    private func drawCycleRing(in rect: CGRect, context: CGContext, radius: CGFloat, lineWidth: CGFloat, shadowBlur: CGFloat, shadowColor: UIColor) {
        context.beginPath()
        context.addArc(center: rect.center, radius: radius, startAngle: .pi * 0.75, endAngle: .pi * 2.25, clockwise: false)
        context.setLineCap(.round)
        context.setLineWidth(lineWidth)
        context.setShadow(offset: .zero, blur: shadowBlur, color: shadowColor.cgColor)
        context.setStrokeColor(UIColor.white.cgColor)
        context.strokePath()
    }
    
    private func drawCyclePhase(in rect: CGRect, startAngle: CGFloat, endAngle: CGFloat, radius: CGFloat, lineWidth: CGFloat, color: UIColor) {
        let path = UIBezierPath(arcCenter: rect.center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
        path.lineWidth = lineWidth
        path.lineCapStyle = .round
        color.setStroke()
        path.stroke()
    }
    
    private func drawCycleActiviy(in rect: CGRect, radius: CGFloat, positionAngle: CGFloat, rotationAngle: CGFloat, in context: CGContext) {
        context.saveGState()
        let transform = CGAffineTransform.identity
            .translatedBy(
                x: rect.midX - radius * sin(positionAngle), 
                y: rect.midY - radius * cos(positionAngle))
            .rotated(by: rotationAngle)
        context.concatenate(transform)
        context.setShadow(offset: .init(width: 0, height: 1.25), blur: 2.5, color: UIColor(white: 0, alpha: 0.1).cgColor)
        
        drawHeart(in: context)
        
        context.restoreGState()
    }
    
    private func drawLabels() {
        let nstr = "5"
        let nsize = nstr.boundingRect(with: bounds.size, attributes: attributesNumber)
        (nstr as NSString).draw(in: .init(x: bounds.midX - nsize.width * 0.5, y: bounds.midY - nsize.height * 0.5 - 10, width: nsize.width, height: nsize.height), withAttributes: attributesNumber)
        
        let ustr = "sex days"
        let usize = ustr.boundingRect(with: bounds.size, attributes: attributesUnit)
        (ustr as NSString).draw(in: .init(x: bounds.midX - usize.width * 0.5, y: bounds.midY + nsize.height * 0.5 - 10, width: usize.width, height: usize.height), withAttributes: attributesUnit)
        
        let height = "CD".boundingRect(with: bounds.size, attributes: attributesCD).size.height
        ("CD 1" as NSString).draw(in: .init(x: 0, y: bounds.maxY - height - 8, width: bounds.width * 0.5, height: height), withAttributes: attributesCD)
        ("CD 28" as NSString).draw(in: .init(x: bounds.width * 0.5, y: bounds.maxY - height - 8, width: bounds.width * 0.5, height: height), withAttributes: attributesCD)
    }
    
    private let attributesCD: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 14),
        .foregroundColor: UIColor.hex(0x999999),
        .paragraphStyle: NSParagraphStyle.mutable().with(\.alignment, .center)
    ]
    
    private let attributesUnit: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 14),
        .foregroundColor: UIColor.hex(0x666666)
    ]
    
    private let attributesNumber: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 36, weight: .bold),
        .foregroundColor: UIColor.hex(0x333333)
    ]
}

class SexSummaryView: UIView {
    
    private let ringView = CycleRingView()
    private let bodyView = FemaleBodyView()
    
    func animate() {
        bodyView.animate(to: .random(in: 0.2...0.8))
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        clipsToBounds = false
        backgroundColor = .clear
        addSubview(ringView)
        ringView.clipsToBounds = false
        addSubview(bodyView)
    }
    
    override func draw(_ rect: CGRect) {
        drawBorder(in: rect)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        ringView.frame = CGRect(x: 0, y: 0, width: 186, height: 182)
        bodyView.frame = CGRect(x: 186, y: 0, width: 212, height: 156)
    }
}

class ViewController: DemoViewController {
    
    let summaryView = SexSummaryView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .white
        frameView.backgroundColor = UIColor.hex(0xFFEDED)
        frameView.addSubview(summaryView)
        summaryView.translatesAutoresizingMaskIntoConstraints = false
        summaryView.centerInSuperview(height: 200)
    }
    
    @objc
    override func animateBlock() {
        summaryView.animate()
    }
}

let page = ViewController()

PlaygroundPage.current.needsIndefiniteExecution = true
PlaygroundPage.current.liveView = page
</string>
			<key>ModifiedRange</key>
			<string>{1, 10368}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
