<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit
import PlaygroundSupport

class MonthView: UIView {
    
    var title: String = "OCT"
    
    var indexPathes: [IndexPath] = [] {
        didSet {
            setNeedsDisplay()
        }
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
        translatesAutoresizingMaskIntoConstraints = false
        constraint(to: .init(width: 152, height: 172))
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func draw(_ rect: CGRect) {
        drawBorder(in: rect)
        
        let drawRect = bounds.insetBy(dx: 8, dy: 8)
        drawLabels(in: drawRect)
        
        guard let context = UIGraphicsGetCurrentContext() else { return }
        let brect = drawRect.offsetBy(dx: 0, dy: 40)
        indexPathes.forEach {
            drawBlock(at: $0, rect: brect, context: context)
        }
    }
    
    private func drawLabels(in rect: CGRect) {
        (title as NSString).draw(in: .init(x: rect.minX, y: rect.minY, width: rect.width, height: 14), withAttributes: [.font: UIFont.systemFont(ofSize: 12, weight: .semibold), .foregroundColor: UIColor.hex(0x333333)])
        
        let weeks =  ["S", "M", "T", "W", "T", "F", "S"]
        for i in 0 ..&lt; 7  {
            let text = weeks[i]
            (text as NSString).draw(in: .init(x: rect.minX + CGFloat(20 * i), y: rect.minY + 18, width: 16, height: 14), withAttributes: [.font: UIFont.systemFont(ofSize: 12), .foregroundColor: UIColor.hex(0x999999), .paragraphStyle: NSParagraphStyle.mutable().with(\.alignment, .center)])
        }
    }
    
    private func drawBlock(at indexPath: IndexPath, rect: CGRect, context: CGContext) {
        context.saveGState()
        context.translateBy(x: CGFloat(20 * indexPath.item), y: CGFloat(20 * indexPath.section))
        context.beginPath()
        let path = UIBezierPath(roundedRect: CGRect(origin: rect.origin, size: CGSize(width: 16, height: 16)), cornerRadius: 2)
        context.addPath(path.cgPath)
//          context.setLineWidth(1)
//          context.setStrokeColor(UIColor.black.cgColor)
        context.setFillColor(UIColor.white.cgColor)
        context.drawPath(using: .fillStroke)
        context.restoreGState()
    }
}

class CalendarView: UIView {
    let scrollView = UIScrollView()
    let contentView = UIView()
    let monthViews = [CGRect](repeating: .zero, count: 6).map(MonthView.init(frame:))
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        let stackView = UIStackView(arrangedSubviews: monthViews)
        stackView.axis = .horizontal
        stackView.spacing = 8
        stackView.alignment = .fill
        stackView.distribution = .fillEqually
        stackView.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(stackView)
        stackView.pinEdgesToSuperview()
        
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        contentView.translatesAutoresizingMaskIntoConstraints = false
        
        scrollView.pinEdgesToSuperview()
        contentView.pinEdgesToSuperview()
        contentView.heightAnchor.constraint(equalTo: scrollView.heightAnchor, multiplier: 1)
        
        for (index, view) in monthViews.enumerated() {
            let date = Date() + .months(index)
            view.title = date.monthDesc
            view.indexPathes = date.allDatesInSameMonth().map({ $0.indexPath })
        }
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

class ViewController: DemoViewController {
    
    let calendarView = CalendarView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = UIColor.white
        frameView.backgroundColor = UIColor.hex(0xDDF3FF)
        frameView.addSubview(calendarView)
        
        calendarView.translatesAutoresizingMaskIntoConstraints = false
        calendarView.centerInSuperview(height: 176)
    }
}

let page = ViewController()

PlaygroundPage.current.needsIndefiniteExecution = true
PlaygroundPage.current.liveView = page
</string>
			<key>ModifiedRange</key>
			<string>{0, 4267}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
