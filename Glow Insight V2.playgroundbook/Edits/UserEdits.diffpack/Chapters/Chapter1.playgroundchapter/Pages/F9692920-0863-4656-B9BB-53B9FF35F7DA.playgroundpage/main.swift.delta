<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit
import PlaygroundSupport

class AvgLineView: UIView {
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .clear
    }
    
    override func draw(_ rect: CGRect) {
        let path = UIBezierPath()
        path.setLineDash([2, 2], count: 2, phase: 0)
        path.move(to: .init(x: bounds.minX, y: bounds.midY))
        path.addLine(to: .init(x: bounds.maxX, y: bounds.midY))
        UIColor.hex(0x5B62D2).setStroke()
        path.stroke()
        
        let lsize = label.boundingRect(with: bounds.size, attributes: attributes).size
        let lrect = CGRect(x: bounds.width - lsize.width, y: bounds.midY - lsize.height, width: lsize.width, height: lsize.height)
        (label as NSString).draw(in: lrect, withAttributes: attributes)
    }

    private let label = "AVG"
    
    private let attributes: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 14, weight: .semibold),
        .foregroundColor: UIColor.hex(0x5B62D2),
        .paragraphStyle: NSParagraphStyle.mutable().with(\.lineHeightMultiple, 1.21)
    ]
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

class ChartBarView: UIView {
    
    private lazy var gradientLayer: CAGradientLayer = {
        let layer = CAGradientLayer()
        layer.colors = [
            UIColor.hex(0xFF538D),
            UIColor.hex(0xFFABF7, alpha: 0.5),
            UIColor.hex(0xFFB2F7, alpha: 0.2),
            UIColor.hex(0xFFB9F8, alpha: 0)
        ].map({ $0.cgColor })
        layer.locations = [0.0, 0.69, 0.85, 1.0]
        layer.startPoint = .init(x: 0.5, y: 0)
        layer.endPoint = .init(x: 0.5, y: 1)
        return layer
    }()
    
    private func maskLayer(width: CGFloat) -&gt; CAShapeLayer {
        let layer = CAShapeLayer()
        layer.strokeColor = UIColor.black.cgColor
        layer.path = self.barPath(width: width).cgPath
        layer.lineWidth = width
        layer.lineCap = .round
        layer.strokeEnd = 0
        return layer
    }
    
    func barPath(width: CGFloat) -&gt; UIBezierPath {
        let path = UIBezierPath()
        let rect = bounds.inset(by: .init(top: width * 0.5, left: 0, bottom: 0, right: 0))
        path.move(to: .init(x: rect.midX, y: rect.maxY))
        path.addLine(to: .init(x: rect.midX, y: rect.minY))
        path.lineCapStyle = .round
        return path
    }
    
    func animate(to value: Double) {
        guard let layer = layer.mask else {
            return
        }
        let key = String(describing: self)
        let animation = strokeAnimation(toValue: value)
        layer.removeAnimation(forKey: key)
        layer.add(animation, forKey: key)
    }
    
    deinit {
        layer.removeAllAnimations()
    }
    
    private func strokeAnimation(toValue: Double) -&gt; CAAnimation {
        let anim = CABasicAnimation(keyPath: "strokeEnd")
        anim.fromValue = 0
        anim.toValue = toValue
        anim.duration = 0.5
        anim.timingFunction = .init(name: .easeOut)
        anim.isRemovedOnCompletion = false
        anim.fillMode = .forwards
        return anim
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        layer.addSublayer(gradientLayer)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        gradientLayer.frame = bounds
        layer.mask = nil
        layer.mask = maskLayer(width: bounds.width * 0.8)
    }
}

class CycleChartView: UIView {
    
    private lazy var barViews = [CGRect](repeating: .zero, count: 6).map(ChartBarView.init)
    
    private lazy var barContainerView: UIStackView = {
        let stackView = UIStackView(arrangedSubviews: self.barViews)
        stackView.axis = .horizontal
        stackView.alignment = .fill
        stackView.distribution = .fillEqually
        return stackView
    }()
    
    private let avgLineView = AvgLineView()
    
    func animate() {
        let data = [Double](generating: .random(in: 0...1), count: barViews.count)
        
        zip(barViews, data).forEach({
            $0.animate(to: $1)
        })
        UIView.animate(withDuration: 0.2, delay: 0.2, options: [.curveEaseInOut], animations: {
            self.avgLineView.alpha = 1
            self.avgLineView.frame = self.avgFrame(at: data.average(excludingZeros: true))
        })
    }
    
    init() {
        super.init(frame: .zero)
        backgroundColor = .clear
        addSubview(barContainerView)
        addSubview(avgLineView)
        avgLineView.alpha = 0
    }
    
    override func draw(_ rect: CGRect) {
        drawBorder(in: rect)
        guard let context = UIGraphicsGetCurrentContext() else { return }
        drawYAxis(labels: ["6", "4", "2", "0"], rect: axisYFrame, context: context)
        drawAxisX(labels: ["Jan\n1", "Jan\n29", "Feb\n28", "Mar\n2", "Mar\n31", "Apr\n30"], rect: axisXFrame, context: context)
    }
    
    private func drawYAxis(labels: [String], rect: CGRect, context: CGContext) {
        let ut = rect.height / CGFloat(labels.count - 1)
        
        func drawLabel(_ label: String) {
            let size = label.boundingRect(with: .zero, attributes: axisYAttributes).size
            let origin = CGPoint(x: rect.minX, y: rect.minY - size.height / 2)
            (label as NSString).draw(in: .init(origin: origin, size: size), withAttributes: axisYAttributes)
        }
        for (i, label) in labels.enumerated() {
            context.saveGState()
            context.translateBy(x: 0, y: ut * CGFloat(i))
            drawLabel(label)
            context.restoreGState()
        }
    }
    
    private func drawAxisX(labels: [String], rect: CGRect, context: CGContext) {
        let ut = rect.width / CGFloat(labels.count)
        
        func drawLabel(_ label: String) {
            let size = label.boundingRect(with: .zero, attributes: axisXAttributes).size
            let origin = CGPoint(x: rect.minX + (ut - size.width) / 2, y: rect.minY)
            (label as NSString).draw(in: .init(origin: origin, size: size), withAttributes: axisXAttributes)
        }
        for (index, label) in labels.enumerated() {
            context.saveGState()
            context.translateBy(x: ut * CGFloat(index), y: 0)
            drawLabel(label)
            context.restoreGState()
        }
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        barContainerView.frame = bounds.inset(by: containerInsets)
        avgLineView.frame = avgFrame(at: 0)
    }
    
    private var containerInsets: UIEdgeInsets {
        .init(top: 22, left: 50, bottom: 33, right: 30)
    }
    
    private func avgFrame(at value: Double) -&gt; CGRect {
        CGRect(x: 36, y: bounds.height - 50 - 120.0 * CGFloat(value), width: bounds.width - 36, height: 35)
    }
    
    private var axisYFrame: CGRect {
        let bcFrame = barContainerView.frame
        return CGRect(x: 16, y: bcFrame.minY, width: 50, height: bcFrame.height)
    }
    
    private let axisYAttributes: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 14),
        .foregroundColor: UIColor.systemGray
    ]
    
    private var axisXFrame: CGRect {
        let bcFrame = barContainerView.frame
        return CGRect(x: bcFrame.minX, y: bcFrame.maxY + 5, width: bcFrame.width, height: 28)
    }
    
    private let axisXAttributes: [NSAttributedString.Key: Any] = [
        .font: UIFont.systemFont(ofSize: 12),
        .foregroundColor: UIColor.systemGray,
        .paragraphStyle: NSParagraphStyle.mutable().with(\.alignment, .center)
    ]
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

class ViewController: DemoViewController {
    
    let chartView = CycleChartView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = UIColor.hex(0xFFEDED)
        frameView.backgroundColor = .white
        frameView.addSubview(chartView)
        
        chartView.translatesAutoresizingMaskIntoConstraints = false
        chartView.centerInSuperview(height: 175)
    }
    
    @objc
    override func animateBlock() {
        chartView.animate()
    }
}

let page = ViewController()

PlaygroundPage.current.needsIndefiniteExecution = true
PlaygroundPage.current.liveView = page
</string>
			<key>ModifiedRange</key>
			<string>{0, 8488}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
